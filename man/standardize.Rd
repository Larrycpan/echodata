% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/standardize.R
\name{standardize}
\alias{standardize}
\title{Standardize the locus subset}
\usage{
standardize(
  query,
  subset_path = NULL,
  locus = NULL,
  colmap = construct_colmap(),
  compute_n = "ldsc",
  return_dt = TRUE,
  nThread = 1,
  verbose = TRUE
)
}
\arguments{
\item{query}{data.frame of summary stat.}

\item{subset_path}{Path where the \code{query} should be 
saved after standardization.}

\item{locus}{Locus name.}

\item{colmap}{Column mapping object.}

\item{compute_n}{How to compute per-SNP sample size (new column "N").
\itemize{
\item{\code{0}: }{N will not be computed.}
\item{\code{>0}: }{If any number >0 is provided,
that value will be set as N for every row.
\strong{Note}: Computing N this way is incorrect and should be avoided
if at all possible.}
\item{\code{"sum"}: }{N will be computed as:
cases (N_CAS) + controls (N_CON), so long as both columns are present}.
\item{\code{"ldsc"}: }{N will be computed as effective sample size:
Neff =(N_CAS+N_CON)*(N_CAS/(N_CAS+N_CON)) / mean((N_CAS/(N_CAS+N_CON))(N_CAS+N_CON)==max(N_CAS+N_CON))}
\item{\code{"giant"}: }{N will be computed as effective sample size:
Neff = 2 / (1/N_CAS + 1/N_CON)}.
\item{\code{"metal"}: }{N will be computed as effective sample size:
Neff = 4 / (1/N_CAS + 1/N_CON)}.
}}

\item{return_dt}{Return data.table or path to saved data.table.}

\item{nThread}{Number of threads to parallelise saving across.}

\item{verbose}{Print messages.}
}
\description{
After querying a subset of the full summary statistics,
this function converts it into a standardized format
that the rest of \emph{echolocatoR} can work with.
}
\examples{
query <- echodata::BST1
#### Screw up data
query$rsid <- query$SNP
query <- data.frame(query)[,!colnames(query) \%in\% c("MAF","SNP")]
query[c(10,30,55),"Freq"] <- 0
query[c(12,22),"Freq"] <- NA

subset_path <- file.path(tempdir(),"BST1.tsv")
data.table::fwrite(query, subset_path)
query2 <- echodata::standardize(query = query,
                                subset_path = subset_path,
                                locus = "BST1",
                                colmap = construct_colmap(SNP="rsid"))
}
